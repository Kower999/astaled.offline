<?php
include_once dirname(__FILE__).'/../abstract/DataController.php';

class ImportProductsController extends DataController
{
	public function __construct()
	{
	 	$this->table = 'data_import';
		$this->className = 'ImportProducts';
//		Shop::addTableAssociation('obsegoi_lists', array('type' => 'shop'));

		$this->fields_options = array(
			'general' => array(
				'title' =>	$this->l('Aktualizácia Cenníkov a Produktov'),
                'image' => _PS_ADMIN_IMG_.'../t/AdminImport.gif',                
                'description' => 'Uistite sa že ste pripojený k internetu pre stiahnutie aktualizácie cenníkov a katalógu produktov.',
			'submit' => array(
				'title' => $this->l('Aktualizovať'),
				'class' => 'button',
				'style' => 'display: block'
			)
			)
		);
		
		parent::__construct();
		$this->meta_title = $this->l('Aktualizácia Cenníkov a Produktov').' - '.$this->module->displayName;
		if (!$this->module->active)
			Tools::redirectAdmin($this->context->link->getAdminLink('AdminHome'));
            
        if (!defined('_PS_ONLINE_DOWNLOAD_'))
            define('_PS_ONLINE_DOWNLOAD_',         'http://astaled.sk/download/');

        $this->last_version = Configuration::get('LAST_UPDATE_PRODUCTS_VERSION');            

        if(ENT_XML1 != 16) {
	       define('ENT_XML1', 16);            
        }
            
	}
    public function xml($file)
    {
        return simplexml_load_string (html_entity_decode(file_get_contents($file),ENT_XML1 , "UTF-8"));     
//        html_entity_decode($string, ENT_QUOTES, "utf-8");       
        
    }
        
    public function addImport($arr, $pri_key, $table, $employee)
    {

//        $i = new Imports();
//        $i->id_employee = $employee;
//        $i->key = $pri_key;
//        $i->exported = $arr[$pri_key];
//        $i->my_date_add = $arr['date_add'];
//        if($i->check()) {        
//            $vals = array_diff_key($arr,array($pri_key => 1));
            $vals = $arr;
            $keys = array_keys($vals);

            array_walk($vals, 'decode_array');
/*            
            $upd = '';
            foreach($keys as $key){
                $upd .= empty($upd)? '' : ' , ';
                $upd.= '`'. $key . '`="' . $vals[$key] . '"';
            }
*/            
            
//            $vals = array_diff_key($arr,array($pri_key => 1));
//            $keys = array_keys($vals);
            
                    
            $sql = 'INSERT INTO `'._DB_PREFIX_.$table.'` (`'.implode('`, `',$keys).'`) VALUES (\''.implode('\', \'',$vals).'\') ';
//            $sql = 'INSERT INTO `'._DB_PREFIX_.$table.'` (`'.implode('`, `',$keys).'`) VALUES (\''.implode('\', \'',$vals).'\') ON DUPLICATE KEY UPDATE '.$upd;
//            Tools::fd($sql);
            Db::getInstance()->execute($sql);
            $w = Db::getInstance()->Insert_ID();
/*            
            if(empty($w)) {
                $sql = 'UPDATE `'._DB_PREFIX_.$table.'` SET '.$upd. ' WHERE '.$pri_key.' = "'.$vals[$pri_key].'"';
                Db::getInstance()->execute($sql);
                $w = $vals[$pri_key];
//            Tools::fd($sql);
            } else {
                $i->imported = $w; 
                $i->add();                
            }
*/            
            return $w;
/*        } else {
            Tools::fd('UPDATE :'.$i->exported);
        }
*/        
//        return false;
    }
    
    public function walkxml($file, $parent, $child, $pri_key, $table, $arr = null, $re = null) 
    {
            $xml = $this->xml(_PS_UPLOAD_DIR_.'/import_tmp/'.$file);
            $ret = array();            
            
            Db::getInstance()->execute('TRUNCATE '._DB_PREFIX_.$table);
            
            foreach($xml->{$parent}->{$child} as $c)
            {
                $row = array();
                foreach($c as $field) {
                    $row[$field->getName()] = ''.$field;
                }
                $ret[$row[$pri_key]] = $row;
                
                    $empl = 1;
/*                    
                    if(!empty($re))
                        foreach($re as $k => $r){
                            if(isset($row[$k])) {
                                if(!empty($arr[$r['table']][$row[$k]]['imported'])) {
                                    $row[$k] = $arr[$r['table']][$row[$k]]['imported'];                                  
                                } else {
                                    $row[$k] = Imports::getImp($r['key'],$row[$k]);
                                }                                
                            }
                        }
                    $ret[$row[$pri_key]] = $row;
*/                    
//                    $t = (isset($re[$pri_key]['table']))? $re[$pri_key]['table'] : $table;
//                    $ret[$row[$pri_key]]['imported'] = 
//                        (empty($arr[$t][$row[$pri_key]]['imported'])) ?
                        $this->addImport( $row, $pri_key, $table, $empl);// : 
//                        $arr[$t][$row[$pri_key]]['imported'];                                                            
                                
            }
            
            return $ret;
        
    }

    public function importSubtable($arr, $table, $pri_key,  $exclude = false,$pri_keys)
    {
        if(!empty($pri_keys)) {
                $vals = $arr;
                
                array_walk($vals, 'decode_array');

                $keys = array_keys($arr);            
        } else {
            if($exclude){
                $vals = array_diff_key($arr,array($pri_key => 1));
                $keys = array_keys($vals);            
            } else {
                $vals = $arr;
                $keys = array_keys($arr);            
            }
            
        }
        
        
        $where = '';
        if(empty($pri_keys)) {
            $where .= (empty($where))? ' WHERE `'.$pri_key.'` = "'.pSQL($vals[$pri_key]).'"': ' AND `'.$pri_key.'` = "'.pSQL($vals[$pri_key]).'"';                
        } else {
            foreach($pri_keys as $pri_k){
                $where .= (empty($where))? ' WHERE `'.$pri_k.'` = "'.pSQL($vals[$pri_k]).'"': ' AND `'.$pri_k.'` = "'.pSQL($vals[$pri_k]).'"';
            }
        }
            
        $sql = 'SELECT * FROM `'._DB_PREFIX_.$table.'` '.$where;
        $test = Db::getInstance()->getRow($sql);
//        Tools::fd('--------------------------------------------');
//                Tools::fd($test);
//                Tools::fd($sql);
        if(empty($test)) {
            $sql = 'INSERT INTO `'._DB_PREFIX_.$table.'` (`'.implode('`, `',$keys).'`) VALUES (\''.implode('\', \'',$vals).'\')';
            Db::getInstance()->execute($sql);
            return Db::getInstance()->Insert_ID();
        } else {

            $sql = 'DELETE FROM `'._DB_PREFIX_.$table.'`'.$where;
            Db::getInstance()->execute($sql);

            if((int)($vals[$pri_key]) == 150)
                Tools::fd($sql);

            $sql = 'INSERT INTO `'._DB_PREFIX_.$table.'` (`'.implode('`, `',$keys).'`) VALUES (\''.implode('\', \'',$vals).'\')';
            Db::getInstance()->execute($sql);



            if((int)($vals[$pri_key]) == 150)
                Tools::fd($sql);

            return Db::getInstance()->Insert_ID();
            
            
        }
        return false;

    }
    

    public function walkchildtablexml($file, $parent, $child, $pri_key, $table, $arr = null, $re = array(), $exclude = false,$ptable,$multikeys = array()) 
    {
            $xml = $this->xml(_PS_UPLOAD_DIR_.'/import_tmp/'.$file);
            $ret = array();

            Db::getInstance()->execute('TRUNCATE '._DB_PREFIX_.$table);
            
//Tools::fd($re);     
//Tools::fd($xml->{$parent}->{$child});            
            $cons = array_keys($re);
            
        if(!empty($xml->{$parent}->{$child}))
            foreach($xml->{$parent}->{$child} as $c)
            {
                $row = array();
                $old = array();
                foreach($c as $field) {
                    $k = $field->getName();
                    $v = ''.$field;
/*                    
                    if(in_array($k,$cons )) {
                        if(!empty($arr[$re[$k]['table']][$v]['imported'])) {
//                            $row[$k] = $arr[$re[$k]][$v]['imported'];  
                            $row[$k] = $arr[$re[$k]['table']][$v]['imported'];  
                        } else {
                            $row[$k] = Imports::getImp($re[$k]['key'],$v);
                        }
                    } else {
                        $row[$k] = $v;                                            
                    }
*/                    
                    $row[$k] = $v;                                            
                            
                    $old[$k] = $v;                                  
                }
                
                $this->importSubtable($row,$table,$pri_key,$exclude,$multikeys);
                /*
                if (empty($ret[$row[$pri_key]])) {
                    $ret[$row[$pri_key]] = $row;
                    $ret[$row[$pri_key]]['imported'] = (!empty($arr[$ptable][$old[$pri_key]]['imported'])) ? $this->importSubtable($row,$table,$pri_key,$exclude,$multikeys) : Imports::getImp($pri_key,$old[$pri_key]);                                                            
                } else {
                    $i = true;
                    foreach($re as $k1 => $a){
                        if(isset($old[$a['key']]))
                            if(isset($arr[$a['table']][$old[$a['key']]]['imported']))
                                if(!empty($arr[$a['table']][$old[$a['key']]]['imported'])) {
                                    $row[$a['key']] = $arr[$a['table']][$old[$a['key']]]['imported'];
                                }                                 
                    }
                    
                    if(!empty($multikeys)){
                        $i = true;
                        foreach($multikeys AS $mk){
//                            $i &= 
                        }
                    } else {
                        $i = !empty($arr[$table][$pri_key]['imported']);
                    }
                    
                    if($i) {                        
                        $row['imported'] = $this->importSubtable($row,$table,$pri_key,$exclude,$multikeys);                            
                    } else $row['imported'] = false;                      
                    if(isset($ret[$row[$pri_key]][$pri_key])) {
                                                                                
                        $tmp = $ret[$row[$pri_key]];
                        $ret[$row[$pri_key]] = array();
                        $ret[$row[$pri_key]][] = $tmp;
                    }
                    $ret[$row[$pri_key]][] = $row;
                }
                */

            }
            
            return $ret;
        
    }
	
	public function postProcess() {
	   
        $field_name = 'zipfile';

		if (Tools::isSubmit('submitOptionsdata_import'))
		{
            $fname = 'export_products.xml';
            file_put_contents(_PS_DOWNLOAD_DIR_.$fname, fopen(_PS_ONLINE_DOWNLOAD_.$fname, 'r'));
            
            if(file_exists(_PS_DOWNLOAD_DIR_.$fname)){
                $xml = $this->xml(_PS_DOWNLOAD_DIR_.$fname);
                
                if($this->last_version == ''.$xml->version){
                    $this->errors[] = Tools::displayError('Už máte nainštalovanú najaktuálnejšiu verziu systému. Nieje potrebná ďaľšia aktualizácia. Posledná verzia je: '.$this->last_version);
//                    return;                                
                }
                
            } else {
                    $this->errors[] = Tools::displayError(' Chyba pri sťahovaní konfiguračného súboru aktualizácie produktov.');
                    return;                                                
            }

			unlink(_PS_DOWNLOAD_DIR_.$fname);
            
            $fname = $xml->file;
            
            file_put_contents(_PS_DOWNLOAD_DIR_.$fname, fopen(_PS_ONLINE_DOWNLOAD_.$fname, 'r'));

            if(!file_exists(_PS_DOWNLOAD_DIR_.$fname)){
                    $this->errors[] = Tools::displayError(' Chyba pri sťahovaní aktualizačného súboru.');
                    return;                                                                
            }
                            
            $zip = new ZipArchive;
            $res = $zip->open(_PS_DOWNLOAD_DIR_.$fname);
            if ($res === TRUE) {
                $zip->extractTo(_PS_UPLOAD_DIR_.'/import_tmp/');
                $zip->close();
            } else {
                $this->errors[] = 'Error opening zip file ('.$res.')';
            }
            
            $suvisiace = array();
            $suvisiace['id_category_default'] = array('table'=>'category','key'=>'id_category');

            $pole['category'] = $this->walkxml('category.xml','categorys', 'category','id_category', 'category'); 
            $pole['product'] = $this->walkxml('product.xml','products', 'product','id_product', 'product',$pole, $suvisiace);
            $pole['group'] = $this->walkxml('group.xml','groups', 'group','id_group', 'group',$pole, $suvisiace);

            $suvisiace['id_category'] = array('table'=>'category','key'=>'id_category');
            $suvisiace['id_group'] = array('table'=>'group','key'=>'id_group');
            
            $pole['group_lang'] = $this->walkchildtablexml('group_lang.xml','group_langs','group_lang','id_group','group_lang',$pole,$suvisiace,false,'group',array('id_group','id_lang'));
            $pole['group_shop'] = $this->walkchildtablexml('group_shop.xml','group_shops','group_shop','id_group','group_shop',$pole,$suvisiace,false,'group',array('id_group','id_shop'));

            $pole['category_lang'] = $this->walkchildtablexml('category_lang.xml','category_langs','category_lang','id_category','category_lang',$pole,$suvisiace,false,'category',array('id_category','id_shop','id_lang'));
            $pole['category_group'] = $this->walkchildtablexml('category_group.xml','category_groups','category_group','id_category','category_group',$pole,$suvisiace,false,'category',array('id_category','id_group'));
            $pole['category_shop'] = $this->walkchildtablexml('category_shop.xml','category_shops','category_shop','id_category','category_shop',$pole,$suvisiace,false,'category',array('id_category','id_shop'));
            $suvisiace['id_product'] = array('table'=>'product','key'=>'id_product');
            $pole['category_product'] = $this->walkchildtablexml('category_product.xml','category_products','category_product','id_category','category_product',$pole,$suvisiace,false,'category',array('id_category','id_product'));
                                   
            $pole['product_lang'] = $this->walkchildtablexml('product_lang.xml','product_langs','product_lang','id_product','product_lang',$pole,$suvisiace,false,'product',array('id_product','id_shop','id_lang'));
            $pole['product_shop'] = $this->walkchildtablexml('product_shop.xml','product_shops','product_shop','id_product','product_shop',$pole,$suvisiace,false,'product',array('id_product','id_shop'));
            $pole['product_provisions'] = $this->walkchildtablexml('product_provisions.xml','product_provisionss','product_provisions','id_product_provisions','product_provisions',$pole,$suvisiace,false,'product');
            $pole['product_vip_prices'] = $this->walkchildtablexml('product_vip_prices.xml','product_vip_pricess','product_vip_prices','id_product_vip_prices','product_vip_prices',$pole,$suvisiace,false,'product');

//            var_dump($pole['category_lang']);           

			unlink(_PS_DOWNLOAD_DIR_.$fname);
            
            if(empty($this->errors)) {
                Configuration::updateValue('LAST_UPDATE_PRODUCTS_VERSION', ''.$xml->version);  
                $this->confirmations[] = Tools::displayError('Aktualizácia prebehla úspešne');
            }
            
		}

 
    }
	
}

    function decode_array(&$item1, $key)
    {
        $item1 = html_entity_decode($item1);
    }    
